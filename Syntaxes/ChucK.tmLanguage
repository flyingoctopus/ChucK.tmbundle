<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>ck</string>
	</array>
	<key>foldingStartMarker</key>
	<string>(\{\s*(//.*)?$|^\s*// \{\{\{)</string>
	<key>foldingStopMarker</key>
	<string>^\s*(\}|// \}\}\}$)</string>
	<key>name</key>
	<string>ChucK</string>
	<key>patterns</key>
	<array>
		<!-- <dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.package.chuck</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.package.chuck</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.terminator.chuck</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(package)\b(?:\s*([^ ;$]+)\s*(;)?)?</string>
			<key>name</key>
			<string>meta.package.chuck</string>
		</dict> -->
<!-- 		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.import.chuck</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.import.chuck</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.terminator.chuck</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(import)\b(?:\s*([^ ;$]+)\s*(;)?)?</string>
			<key>name</key>
			<string>meta.import.chuck</string>
		</dict> -->
		<dict>
			<key>include</key>
			<string>#code</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>all-types</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#primitive-arrays</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#primitive-types</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-types</string>
				</dict>
			</array>
		</dict>
		<key>annotations</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(@[^ (]+)(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.annotation.chuck</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.annotation-arguments.begin.chuck</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.annotation-arguments.end.chuck</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.declaration.annotation.chuck</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>constant.other.key.chuck</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.assignment.chuck</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(\w*)\s*(=)</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#code</string>
						</dict>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.seperator.property.chuck</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>@\w*</string>
					<key>name</key>
					<string>storage.type.annotation.chuck</string>
				</dict>
			</array>
		</dict>
		<key>anonymous-classes-and-new</key>
		<dict>
			<key>begin</key>
			<string>\bnew\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.new.chuck</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\)|\])(?!\s*{)|(?&lt;=})|(?=;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\w+)\s*(?=\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.chuck</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}|(?=;|\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\[</string>
							<key>end</key>
							<string>\]</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#code</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>{</string>
							<key>end</key>
							<string>(?=})</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#code</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=\w.*\()</string>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#object-types</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\(</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>storage.type.chuck</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#code</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>}</string>
					<key>name</key>
					<string>meta.inner-class.chuck</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#class-body</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>assertions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(assert)\s</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.assert.chuck</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>meta.declaration.assertion.chuck</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>:</string>
							<key>name</key>
							<string>keyword.operator.assert.expression-seperator.chuck</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#code</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>class</key>
		<dict>
			<key>begin</key>
			<string>(?=\w?[\w\s]*(?:class|(?:@)?interface|enum)\s+\w+)</string>
			<key>end</key>
			<string>}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.class.end.chuck</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.class.chuck</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#storage-modifiers</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.chuck</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.class.chuck</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(class|(?:@)?interface|enum)\s+(\w+)</string>
					<key>name</key>
					<string>meta.class.identifier.chuck</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>extends</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.extends.chuck</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?={|implements)</string>
					<key>name</key>
					<string>meta.definition.class.inherited.classes.chuck</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#object-types-inherited</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(implements)\s</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.implements.chuck</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\s*extends|\{)</string>
					<key>name</key>
					<string>meta.definition.class.implemented.interfaces.chuck</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#object-types-inherited</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>(?=})</string>
					<key>name</key>
					<string>meta.class.body.chuck</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#class-body</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>class-body</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#enums</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#methods</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#annotations</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#storage-modifiers</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#code</string>
				</dict>
			</array>
		</dict>
		<key>code</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(dac|adc|blackhole)\b</string>
					<key>name</key>
					<string>support.class.ugen.global.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(SinOsc|PulseOsc|SqrOsc|TriOsc|SawOsc|Phasor|Noise|Impulse|Step|Gain|SndBuf|HalfRect|FullRect|ZeroX|Mix2|Pan2|GenX|CurveTable|WarpTable|LiSa)\b</string>
					<key>name</key>
					<string>support.class.ugen.standart.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(OneZero|TwoZero|OnePole|TwoPole|PoleZero|BiQuad|Filter|LPF|HPF|BPF|BRF|ResonZ|Dyno)\b</string>
					<key>name</key>
					<string>support.class.ugen.filter.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(Envelope|ADSR|Delay|DelayA|DelayL|Echo|JCRev|NRev|PRCRev|Chorus|Modulate|PitShift|SubNoise|Blit|BlitSaw|BlitSquare|WvIn|WaveLoop|WvOut)\b</string>
					<key>name</key>
					<string>support.class.ugen.stk.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(StkInstrument|BandedWG|BlowBotl|BlowHole|Bowed|Brass|Clarinet|Flute|Mandolin|ModalBar|Moog|Saxofony|Shakers|Sitar|StifKarp|VoicForm|FM|BeeThree|FMVoices|HevyMetl|PercFlut|Rhodey|TubeBell|Wurley)\b</string>
					<key>name</key>
					<string>support.class.ugen.instrument.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(Std|Machine|Math)\b</string>
					<key>name</key>
					<string>support.class.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(a(bs|to(i|f))|dbto(pow|rms)|f(abs|tom)|getenv|mtof|powtodb|r(and((2)?f)?(2)?|mstodb)|s(etenv|gn|ystem))\b(?=\()</string>
					<key>name</key>
					<string>support.function.std.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(add|crash|re(move|place)|s(tatus|pork))\b(?=\()</string>
					<key>name</key>
					<string>support.function.machine.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(a(sin|cos|tan(2)?)|c(os(h)?|eil)|exp|f(loor|mod)|hypot|is(inf|nan)|log(2|10)?|m(in|ax)|nextpow2|pow|r(ound|emainder)|s(in(h)?|qrt)|t(an(h)?|runc))\b(?=\()</string>
					<key>name</key>
					<string>support.function.math.chuck</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>}</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#code</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#assertions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parens</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#constants-and-special-vars</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#anonymous-classes-and-new</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#storage-modifiers</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#all-types</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#methods</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.chuck</string>
						</dict>
					</dict>
					<key>match</key>
					<string>/\*\*/</string>
					<key>name</key>
					<string>comment.block.empty.chuck</string>
				</dict>
				<dict>
					<key>include</key>
					<string>text.html.chuckdoc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments-inline</string>
				</dict>
			</array>
		</dict>
		<key>comments-inline</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.chuck</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.chuck</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>comment.line.double-slash.chuck</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.chuck</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\s*((//).*$\n?)</string>
				</dict>
			</array>
		</dict>
		<key>constants-and-special-vars</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(true|false|null|NULL)\b</string>
					<key>name</key>
					<string>constant.language.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(this|super)\b</string>
					<key>name</key>
					<string>variable.language.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(pi|(0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)([LlFfUuDd]|UL|ul)?\b</string>
					<key>name</key>
					<string>constant.numeric.chuck</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.dereference.chuck</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\.)?\b(then|before|after|at)\b</string>
					<key>name</key>
					<string>constant.other.chuck</string>
				</dict>
			</array>
		</dict>
		<key>enums</key>
		<dict>
			<key>begin</key>
			<string>^(?=\s*[A-Z0-9_]+\s*({|\(|,))</string>
			<key>end</key>
			<string>(?=;|})</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\w+</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.other.enum.chuck</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=,|;|})</string>
					<key>name</key>
					<string>meta.enum.chuck</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parens</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>{</string>
							<key>end</key>
							<string>}</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#class-body</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(try|catch|finally|throw)\b</string>
					<key>name</key>
					<string>keyword.control.catch-exception.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\?|:</string>
					<key>name</key>
					<string>keyword.control.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(until|repeat|return|break|case|continue|default|do|while|for|switch|if|else)\b</string>
					<key>name</key>
					<string>keyword.control.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(\$|::)\b</string>
					<key>name</key>
					<string>keyword.operator.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(==|!=|&lt;=|&gt;=|&lt;&gt;|&lt;|&gt;)</string>
					<key>name</key>
					<string>keyword.operator.comparison.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\=\&gt;|\=\&lt;|\@\=\&gt;|\+\=\&gt;|\-\=\&gt;|\*\=\&gt;|\/\=\&gt;|\%\=\&gt;)</string>
					<key>name</key>
					<string>keyword.operator.assignment.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\-\-|\+\+)</string>
					<key>name</key>
					<string>keyword.operator.increment-decrement.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\-|\+|\*|\/(?!\/)|%|\&lt;\&lt;|\&gt;\&gt;|\&amp;|\||\^|\&lt;\&lt;\&lt;|\&gt;\&gt;\&gt;)</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.chuck</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(!|&amp;&amp;|\|\|)</string>
					<key>name</key>
					<string>keyword.operator.logical.chuck</string>
				</dict>
				<!-- <dict>
					<key>match</key>
					<string>(?&lt;=\S)\.(?=\S)</string>
					<key>name</key>
					<string>keyword.operator.dereference.chuck</string>
				</dict> -->
				<dict>
					<key>match</key>
					<string>;</string>
					<key>name</key>
					<string>punctuation.terminator.chuck</string>
				</dict>
			</array>
		</dict>
		<key>methods</key>
		<dict>
			<key>begin</key>
			<string>(?!new)(?=\w.*\s+)(?=\w.*\s+)(?=[^=]+\()</string>
			<key>end</key>
			<string>}|(?=;)</string>
			<key>name</key>
			<string>meta.method.chuck</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>include</key>
							<string>#storage-modifiers</string>
						</dict>
						<key>3</key>
						<dict>
							<key>include</key>
							<string>#primitive-types</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\w+)\s*\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.chuck</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>meta.method.identifier.chuck</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?=\w.*\s+\w+\s*\()</string>
					<key>end</key>
					<string>(?=\w+\s*\()</string>
					<key>name</key>
					<string>meta.method.return-type.chuck</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#all-types</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#throws</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>{</string>
					<key>end</key>
					<string>(?=})</string>
					<key>name</key>
					<string>meta.method.body.chuck</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#code</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>object-types</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b((?:[a-z]\w*\.)*[A-Z]+\w*)&lt;</string>
					<key>end</key>
					<string>&gt;|[^\w\s,\?&lt;\[\]]</string>
					<key>name</key>
					<string>storage.type.generic.chuck</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#object-types</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>&lt;</string>
							<key>comment</key>
							<string>This is just to support &lt;&gt;'s with no actual type prefix</string>
							<key>end</key>
							<string>&gt;|[^\w\s,\[\]&lt;]</string>
							<key>name</key>
							<string>storage.type.generic.chuck</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b((?:[a-z]\w*\.)*[A-Z]+\w*)(?=\[)</string>
					<key>end</key>
					<string>(?=[^\]\s])</string>
					<key>name</key>
					<string>storage.type.object.array.chuck</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\[</string>
							<key>end</key>
							<string>\]</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#code</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.dereference.chuck</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(?:[a-z]\w*(\.))*[A-Z]+\w*\b</string>
					<key>name</key>
					<string>storage.type.chuck</string>
				</dict>
			</array>
		</dict>
		<key>object-types-inherited</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b((?:[a-z]\w*\.)*[A-Z]+\w*)&lt;</string>
					<key>end</key>
					<string>&gt;|[^\w\s,&lt;]</string>
					<key>name</key>
					<string>entity.other.inherited-class.chuck</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#object-types</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>&lt;</string>
							<key>comment</key>
							<string>This is just to support &lt;&gt;'s with no actual type prefix</string>
							<key>end</key>
							<string>&gt;|[^\w\s,&lt;]</string>
							<key>name</key>
							<string>storage.type.generic.chuck</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.dereference.chuck</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(?:[a-z]\w*(\.))*[A-Z]+\w*</string>
					<key>name</key>
					<string>entity.other.inherited-class.chuck</string>
				</dict>
			</array>
		</dict>
		<key>parameters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>final</string>
					<key>name</key>
					<string>storage.modifier.chuck</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#primitive-arrays</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#primitive-types</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-types</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\w+</string>
					<key>name</key>
					<string>variable.parameter.chuck</string>
				</dict>
			</array>
		</dict>
		<key>parens</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#code</string>
				</dict>
			</array>
		</dict>
		<key>primitive-arrays</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?:void|boolean|byte|char|short|int|float|long|double)(\[\])*\b</string>
					<key>name</key>
					<string>storage.type.primitive.array.chuck</string>
				</dict>
			</array>
		</dict>
		<key>primitive-types</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?:int|float|time|dur|void|same|for|if|else|class|extends|this|super|interface|implements|spork|const|new|now|maybe|me|samp|ms|second|minute|hour|day|week|fun|function)\b</string>
					<key>name</key>
					<string>storage.type.primitive.chuck</string>
				</dict>
			</array>
		</dict>
		<key>storage-modifiers</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.chuck</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(static|pure|protected|private|public)\b</string>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.chuck</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.chuck</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.chuck</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\.</string>
							<key>name</key>
							<string>constant.character.escape.chuck</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.chuck</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.chuck</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.chuck</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\.</string>
							<key>name</key>
							<string>constant.character.escape.chuck</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>throws</key>
		<dict>
			<key>begin</key>
			<string>throws</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.chuck</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?={|;)</string>
			<key>name</key>
			<string>meta.throwables.chuck</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-types</string>
				</dict>
			</array>
		</dict>
		<key>values</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-types</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#constants-and-special-vars</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.chuck</string>
	<key>uuid</key>
	<string>2B449DF6-6B1D-11D9-94EC-000D93589AF6</string>
</dict>
</plist>
